        -:    0:Source:test/test_demo.f90
        -:    1:! Test suite for demo calculator
        1:    2:program test_demo
        1:    3:    use demo_calculator
        -:    4:    implicit none
        -:    5:    
        -:    6:    integer :: test_count = 0
        -:    7:    integer :: passed_count = 0
        -:    8:    integer :: failed_count = 0
        -:    9:    
        1:   10:    write(*,*) "Running Demo Calculator Tests"
        1:   11:    write(*,*) "============================="
        -:   12:    
        -:   13:    ! Test addition
        1:   14:    call test_addition()
        -:   15:    
        -:   16:    ! Test multiplication
        1:   17:    call test_multiplication()
        -:   18:    
        -:   19:    ! Test division
        1:   20:    call test_division()
        -:   21:    
        -:   22:    ! Test division by zero
        1:   23:    call test_division_by_zero()
        -:   24:    
        -:   25:    ! Report results
        1:   26:    write(*,*)
        1:   27:    write(*,'(A,I0,A,I0,A,I0,A)') "Tests completed: ", test_count, " (", passed_count, " passed, ", failed_count, " failed)"
        -:   28:    
        1:   29:    if (failed_count > 0) then
    #####:   30:        write(*,*) "TESTS FAILED"
    #####:   31:        stop 1
        -:   32:    else
        1:   33:        write(*,*) "All tests passed"
        -:   34:    end if
        -:   35:
        -:   36:contains
        -:   37:
        1:   38:    subroutine test_addition()
        -:   39:        real :: result
        1:   40:        result = add_numbers(2.0, 3.0)
        1:   41:        call assert_equal(result, 5.0, "Addition test 1")
        -:   42:        
        1:   43:        result = add_numbers(-1.0, 1.0)
        1:   44:        call assert_equal(result, 0.0, "Addition test 2")
        1:   45:    end subroutine test_addition
        -:   46:
        1:   47:    subroutine test_multiplication()
        -:   48:        real :: result
        1:   49:        result = multiply_numbers(4.0, 5.0)
        1:   50:        call assert_equal(result, 20.0, "Multiplication test 1")
        -:   51:        
        1:   52:        result = multiply_numbers(-2.0, 3.0)
        1:   53:        call assert_equal(result, -6.0, "Multiplication test 2")
        1:   54:    end subroutine test_multiplication
        -:   55:
        1:   56:    subroutine test_division()
        -:   57:        real :: result
        1:   58:        result = divide_numbers(10.0, 2.0)
        1:   59:        call assert_equal(result, 5.0, "Division test 1")
        -:   60:        
        1:   61:        result = divide_numbers(-6.0, 3.0)
        1:   62:        call assert_equal(result, -2.0, "Division test 2")
        1:   63:    end subroutine test_division
        -:   64:
        1:   65:    subroutine test_division_by_zero()
        -:   66:        real :: result
        1:   67:        result = divide_numbers(10.0, 0.0)
        1:   68:        call assert_equal(result, 0.0, "Division by zero test")
        1:   69:    end subroutine test_division_by_zero
        -:   70:
        7:   71:    subroutine assert_equal(actual, expected, test_name)
        -:   72:        real, intent(in) :: actual, expected
        -:   73:        character(len=*), intent(in) :: test_name
        -:   74:        
        7:   75:        test_count = test_count + 1
        -:   76:        
        7:   77:        if (abs(actual - expected) < 1.0e-6) then
        7:   78:            write(*,'(A,A,A)') "✓ ", test_name, " PASSED"
        7:   79:            passed_count = passed_count + 1
        -:   80:        else
    #####:   81:            write(*,'(A,A,A,F0.6,A,F0.6)') "✗ ", test_name, " FAILED (expected ", expected, ", got ", actual, ")"
    #####:   82:            failed_count = failed_count + 1
        -:   83:        end if
        7:   84:    end subroutine assert_equal
        -:   85:
        -:   86:end program test_demo
